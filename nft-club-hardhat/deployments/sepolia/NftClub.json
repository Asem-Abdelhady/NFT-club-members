{
  "address": "0xD4136b8E50ED9a561D69a87E95099aaF56476200",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NftClub__CollectionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftClub__IncorrectPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftClub__InvalidCollectionId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftClub__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "NftBought",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collectionId",
          "type": "uint256"
        }
      ],
      "name": "buyNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "checkNftOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        }
      ],
      "name": "createCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collectionId",
          "type": "uint256"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collectionAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "URI",
              "type": "string"
            }
          ],
          "internalType": "struct NftClubStorage.Collection",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCollections",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collectionAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "URI",
              "type": "string"
            }
          ],
          "internalType": "struct NftClubStorage.Collection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextCollectionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "verifyOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0674a4018a0e9c190061d66d857d07695572e3858732bae28a8c78d4cd0ece42",
  "receipt": {
    "to": null,
    "from": "0x006510FA9a9b5b0566209347200d3300081342f3",
    "contractAddress": "0xD4136b8E50ED9a561D69a87E95099aaF56476200",
    "transactionIndex": 44,
    "gasUsed": "3510259",
    "logsBloom": "0x
    "blockHash": "0x711dae5c10cabf3136652941ef05e899d6c3f40bcd9d9f8c2594342b1471454e",
    "transactionHash": "0x0674a4018a0e9c190061d66d857d07695572e3858732bae28a8c78d4cd0ece42",
    "logs": [],
    "blockNumber": 4757231,
    "cumulativeGasUsed": "14564812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1de09622a5b3cd71ac2c86151b27bc36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NftClub__CollectionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftClub__IncorrectPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftClub__InvalidCollectionId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftClub__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkNftOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"getCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"internalType\":\"struct NftClubStorage.Collection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCollections\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"internalType\":\"struct NftClubStorage.Collection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextCollectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"verifyOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftClub.sol\":\"NftClub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/ERC721Generator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract ERC721Generator is ERC721 {\\n    uint256 public s_nextTokenId;\\n    address public s_admin;\\n    string private s_baseTokenURI;\\n\\n    error ERC721Generator__NotAdmin();\\n\\n    event TokenMinted(address indexed to, uint256 tokenId);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseTokenURI\\n    ) ERC721(_name, _symbol) {\\n        s_admin = msg.sender;\\n        s_baseTokenURI = _baseTokenURI;\\n    }\\n\\n    function mint(address _to) external {\\n        if (msg.sender != s_admin) revert ERC721Generator__NotAdmin();\\n        _safeMint(_to, s_nextTokenId);\\n        emit TokenMinted(_to, s_nextTokenId);\\n        s_nextTokenId++;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return s_baseTokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0x129084756b0ef4dbd09be91bc597cf8c5e8a5c6263f8a25d815b4cd8919352be\",\"license\":\"MIT\"},\"contracts/NftClub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './NftClubStorage.sol';\\nimport './ERC721Generator.sol';\\n\\ncontract NftClub is NftClubStorage {\\n    error NftClub__NotOwner();\\n    error NftClub__IncorrectPrice();\\n    error NftClub__CollectionDoesNotExist();\\n    error NftClub__InvalidCollectionId();\\n\\n    event CollectionCreated(\\n        uint256 indexed collectionId,\\n        address indexed collectionAddress,\\n        string URI\\n    );\\n    event NftBought(uint256 indexed collectionId, address indexed buyer);\\n\\n    constructor() {\\n        s_owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != s_owner) revert NftClub__NotOwner();\\n        _;\\n    }\\n\\n    function createCollection(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _price,\\n        string memory _baseTokenURI\\n    ) external onlyOwner {\\n        uint256 id = s_nextCollectionId;\\n        ERC721Generator newCollection = new ERC721Generator(\\n            _name,\\n            _symbol,\\n            _baseTokenURI\\n        );\\n        Collection memory collection = Collection({\\n            collectionAddress: address(newCollection),\\n            price: _price,\\n            name: _name,\\n            URI: _baseTokenURI\\n        });\\n        s_collections[id] = collection;\\n        s_currentCollections.push(collection);\\n        emit CollectionCreated(id, address(newCollection), _baseTokenURI);\\n        s_nextCollectionId++;\\n    }\\n\\n    function buyNft(uint256 _collectionId) external payable {\\n        if (_collectionId >= s_nextCollectionId)\\n            revert NftClub__CollectionDoesNotExist();\\n        if (msg.value < s_collections[_collectionId].price)\\n            revert NftClub__IncorrectPrice();\\n        ERC721Generator collection = ERC721Generator(\\n            s_collections[_collectionId].collectionAddress\\n        );\\n        collection.mint(msg.sender);\\n        s_nftOwners[_collectionId][msg.sender] = true;\\n        emit NftBought(_collectionId, msg.sender);\\n    }\\n\\n    function verifyOwnership(\\n        uint256 _collectionId,\\n        address _user\\n    ) external view returns (bool) {\\n        if (_collectionId >= s_nextCollectionId)\\n            revert NftClub__CollectionDoesNotExist();\\n        return s_nftOwners[_collectionId][_user];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return s_owner;\\n    }\\n\\n    function getNextCollectionId() public view returns (uint256) {\\n        return s_nextCollectionId;\\n    }\\n\\n    function getCollection(\\n        uint256 _collectionId\\n    ) public view returns (Collection memory) {\\n        if (_collectionId >= s_nextCollectionId)\\n            revert NftClub__InvalidCollectionId();\\n        return s_collections[_collectionId];\\n    }\\n\\n    function checkNftOwnership(\\n        uint256 _collectionId,\\n        address _user\\n    ) public view returns (bool) {\\n        if (_collectionId >= s_nextCollectionId)\\n            revert NftClub__InvalidCollectionId();\\n        return s_nftOwners[_collectionId][_user];\\n    }\\n\\n    function getCurrentCollections() public view returns (Collection[] memory) {\\n        return s_currentCollections;\\n    }\\n}\\n\",\"keccak256\":\"0x877f2207e8b84c4e40945fafd86e376fb15413e73b126d39be072eccbe033130\",\"license\":\"MIT\"},\"contracts/NftClubStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract NftClubStorage {\\n    struct Collection {\\n        address collectionAddress;\\n        uint256 price;\\n        string name;\\n        string URI;\\n    }\\n\\n    address internal s_owner;\\n    uint256 internal s_nextCollectionId;\\n    mapping(uint256 => Collection) internal s_collections;\\n    mapping(uint256 => mapping(address => bool)) internal s_nftOwners;\\n    Collection[] internal s_currentCollections;\\n}\\n\",\"keccak256\":\"0x09801222e31176d651820b49227055dd9bf056ecfe7e073dfac683f9c2e0a8d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613e6b806100606000396000f3fe608060405260043610620000865760003560e01c80635a1f3c2811620000555780635a1f3c28146200014f57806384ef9a181462000193578063893d20e814620001d7578063e267185614620002075762000086565b806309cc449d146200008b5780630a7dcc0714620000cf5780631cea913d14620000ff578063243adbdd146200012f575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b1919062000d50565b62000235565b604051620000c6919062000db4565b60405180910390f35b348015620000dc57600080fd5b50620000e7620002d9565b604051620000f6919062000de2565b60405180910390f35b3480156200010c57600080fd5b5062000117620002e3565b60405162000126919062000ffd565b60405180910390f35b6200014d600480360381019062000147919062001021565b620004d8565b005b3480156200015c57600080fd5b506200017b600480360381019062000175919062001021565b620006c0565b6040516200018a9190620010c5565b60405180910390f35b348015620001a057600080fd5b50620001bf6004803603810190620001b9919062000d50565b620008bf565b604051620001ce919062000db4565b60405180910390f35b348015620001e457600080fd5b50620001ef62000963565b604051620001fe9190620010fa565b60405180910390f35b3480156200021457600080fd5b506200023360048036038101906200022d919062001268565b6200098c565b005b6000600154831062000273576040517f0c2d789f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600154905090565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015620004cf57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820180546200039d9062001366565b80601f0160208091040260200160405190810160405280929190818152602001828054620003cb9062001366565b80156200041c5780601f10620003f0576101008083540402835291602001916200041c565b820191906000526020600020905b815481529060010190602001808311620003fe57829003601f168201915b50505050508152602001600382018054620004379062001366565b80601f0160208091040260200160405190810160405280929190818152602001828054620004659062001366565b8015620004b65780601f106200048a57610100808354040283529160200191620004b6565b820191906000526020600020905b8154815290600101906020018083116200049857829003601f168201915b5050505050815250508152602001906001019062000307565b50505050905090565b600154811062000514576040517f0c2d789f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008281526020019081526020016000206001015434101562000565576040517fb18bc8f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636a627842336040518263ffffffff1660e01b8152600401620005db9190620010fa565b600060405180830381600087803b158015620005f657600080fd5b505af11580156200060b573d6000803e3d6000fd5b5050505060016003600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16827f9697071bc08ed28bc23db7ef4cce0abeb5bc570b2a4c9ac79d4200b281d4c44660405160405180910390a35050565b620006ca62000c50565b600154821062000706576040517f38d82d2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054620007969062001366565b80601f0160208091040260200160405190810160405280929190818152602001828054620007c49062001366565b8015620008155780601f10620007e95761010080835404028352916020019162000815565b820191906000526020600020905b815481529060010190602001808311620007f757829003601f168201915b50505050508152602001600382018054620008309062001366565b80601f01602080910402602001604051908101604052809291908181526020018280546200085e9062001366565b8015620008af5780601f106200088357610100808354040283529160200191620008af565b820191906000526020600020905b8154815290600101906020018083116200089157829003601f168201915b5050505050815250509050919050565b60006001548310620008fd576040517f38d82d2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a12576040517f4767ead100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001549050600085858460405162000a2c9062000c8e565b62000a3a93929190620013ed565b604051809103906000f08015801562000a57573d6000803e3d6000fd5b509050600060405180608001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001888152602001858152509050806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201908162000b11919062001611565b50606082015181600301908162000b29919062001611565b50905050600481908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201908162000bc1919062001611565b50606082015181600301908162000bd9919062001611565b5050508173ffffffffffffffffffffffffffffffffffffffff16837fb0b7b214963f2e16da9cf6ed5851757dfed306875edf1d59e030881102ef24ef8660405162000c259190620016f8565b60405180910390a36001600081548092919062000c42906200174b565b919050555050505050505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081525090565b61269d806200179983390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000cc58162000cb0565b811462000cd157600080fd5b50565b60008135905062000ce58162000cba565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000d188262000ceb565b9050919050565b62000d2a8162000d0b565b811462000d3657600080fd5b50565b60008135905062000d4a8162000d1f565b92915050565b6000806040838503121562000d6a5762000d6962000ca6565b5b600062000d7a8582860162000cd4565b925050602062000d8d8582860162000d39565b9150509250929050565b60008115159050919050565b62000dae8162000d97565b82525050565b600060208201905062000dcb600083018462000da3565b92915050565b62000ddc8162000cb0565b82525050565b600060208201905062000df9600083018462000dd1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000e368162000d0b565b82525050565b62000e478162000cb0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000e8957808201518184015260208101905062000e6c565b60008484015250505050565b6000601f19601f8301169050919050565b600062000eb38262000e4d565b62000ebf818562000e58565b935062000ed181856020860162000e69565b62000edc8162000e95565b840191505092915050565b600060808301600083015162000f01600086018262000e2b565b50602083015162000f16602086018262000e3c565b506040830151848203604086015262000f30828262000ea6565b9150506060830151848203606086015262000f4c828262000ea6565b9150508091505092915050565b600062000f67838362000ee7565b905092915050565b6000602082019050919050565b600062000f898262000dff565b62000f95818562000e0a565b93508360208202850162000fa98562000e1b565b8060005b8581101562000feb578484038952815162000fc9858262000f59565b945062000fd68362000f6f565b925060208a0199505060018101905062000fad565b50829750879550505050505092915050565b6000602082019050818103600083015262001019818462000f7c565b905092915050565b6000602082840312156200103a576200103962000ca6565b5b60006200104a8482850162000cd4565b91505092915050565b60006080830160008301516200106d600086018262000e2b565b50602083015162001082602086018262000e3c565b50604083015184820360408601526200109c828262000ea6565b91505060608301518482036060860152620010b8828262000ea6565b9150508091505092915050565b60006020820190508181036000830152620010e1818462001053565b905092915050565b620010f48162000d0b565b82525050565b6000602082019050620011116000830184620010e9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200115b8262000e95565b810181811067ffffffffffffffff821117156200117d576200117c62001121565b5b80604052505050565b60006200119262000c9c565b9050620011a0828262001150565b919050565b600067ffffffffffffffff821115620011c357620011c262001121565b5b620011ce8262000e95565b9050602081019050919050565b82818337600083830152505050565b600062001201620011fb84620011a5565b62001186565b90508281526020810184848401111562001220576200121f6200111c565b5b6200122d848285620011db565b509392505050565b600082601f8301126200124d576200124c62001117565b5b81356200125f848260208601620011ea565b91505092915050565b6000806000806080858703121562001285576200128462000ca6565b5b600085013567ffffffffffffffff811115620012a657620012a562000cab565b5b620012b48782880162001235565b945050602085013567ffffffffffffffff811115620012d857620012d762000cab565b5b620012e68782880162001235565b9350506040620012f98782880162000cd4565b925050606085013567ffffffffffffffff8111156200131d576200131c62000cab565b5b6200132b8782880162001235565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200137f57607f821691505b60208210810362001395576200139462001337565b5b50919050565b600082825260208201905092915050565b6000620013b98262000e4d565b620013c581856200139b565b9350620013d781856020860162000e69565b620013e28162000e95565b840191505092915050565b60006060820190508181036000830152620014098186620013ac565b905081810360208301526200141f8185620013ac565b90508181036040830152620014358184620013ac565b9050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620014a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262001464565b620014af868362001464565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620014f2620014ec620014e68462000cb0565b620014c7565b62000cb0565b9050919050565b6000819050919050565b6200150e83620014d1565b620015266200151d82620014f9565b84845462001471565b825550505050565b600090565b6200153d6200152e565b6200154a81848462001503565b505050565b5b8181101562001572576200156660008262001533565b60018101905062001550565b5050565b601f821115620015c1576200158b816200143f565b620015968462001454565b81016020851015620015a6578190505b620015be620015b58562001454565b8301826200154f565b50505b505050565b600082821c905092915050565b6000620015e660001984600802620015c6565b1980831691505092915050565b6000620016018383620015d3565b9150826002028217905092915050565b6200161c8262000e4d565b67ffffffffffffffff81111562001638576200163762001121565b5b62001644825462001366565b6200165182828562001576565b600060209050601f83116001811462001689576000841562001674578287015190505b620016808582620015f3565b865550620016f0565b601f19841662001699866200143f565b60005b82811015620016c3578489015182556001820191506020850194506020810190506200169c565b86831015620016e35784890151620016df601f891682620015d3565b8355505b6001600288020188555050505b505050505050565b60006020820190508181036000830152620017148184620013ac565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620017588262000cb0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200178d576200178c6200171c565b5b60018201905091905056fe60806040523480156200001157600080fd5b506040516200269d3803806200269d83398181016040528101906200003791906200024e565b828281600090816200004a919062000552565b5080600190816200005c919062000552565b50505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060089081620000b1919062000552565b5050505062000639565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012482620000d9565b810181811067ffffffffffffffff82111715620001465762000145620000ea565b5b80604052505050565b60006200015b620000bb565b905062000169828262000119565b919050565b600067ffffffffffffffff8211156200018c576200018b620000ea565b5b6200019782620000d9565b9050602081019050919050565b60005b83811015620001c4578082015181840152602081019050620001a7565b60008484015250505050565b6000620001e7620001e1846200016e565b6200014f565b905082815260208101848484011115620002065762000205620000d4565b5b62000213848285620001a4565b509392505050565b600082601f830112620002335762000232620000cf565b5b815162000245848260208601620001d0565b91505092915050565b6000806000606084860312156200026a5762000269620000c5565b5b600084015167ffffffffffffffff8111156200028b576200028a620000ca565b5b62000299868287016200021b565b935050602084015167ffffffffffffffff811115620002bd57620002bc620000ca565b5b620002cb868287016200021b565b925050604084015167ffffffffffffffff811115620002ef57620002ee620000ca565b5b620002fd868287016200021b565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035a57607f821691505b60208210810362000370576200036f62000312565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003da7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200039b565b620003e686836200039b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004336200042d6200042784620003fe565b62000408565b620003fe565b9050919050565b6000819050919050565b6200044f8362000412565b620004676200045e826200043a565b848454620003a8565b825550505050565b600090565b6200047e6200046f565b6200048b81848462000444565b505050565b5b81811015620004b357620004a760008262000474565b60018101905062000491565b5050565b601f8211156200050257620004cc8162000376565b620004d7846200038b565b81016020851015620004e7578190505b620004ff620004f6856200038b565b83018262000490565b50505b505050565b600082821c905092915050565b6000620005276000198460080262000507565b1980831691505092915050565b600062000542838362000514565b9150826002028217905092915050565b6200055d8262000307565b67ffffffffffffffff811115620005795762000578620000ea565b5b62000585825462000341565b62000592828285620004b7565b600060209050601f831160018114620005ca5760008415620005b5578287015190505b620005c1858262000534565b86555062000631565b601f198416620005da8662000376565b60005b828110156200060457848901518255600182019150602085019450602081019050620005dd565b8683101562000624578489015162000620601f89168262000514565b8355505b6001600288020188555050505b505050505050565b61205480620006496000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146102ad578063b88d4fde146102c9578063c87b56dd146102e5578063e985e9c51461031557610100565b80636352211e146102135780636a6278421461024357806370a082311461025f57806395d89b411461028f57610100565b8063132788cf116100d3578063132788cf1461019f57806323b872dd146101bd5780633ee3af9a146101d957806342842e0e146101f757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611827565b610345565b60405161012c919061186f565b60405180910390f35b61013d610427565b60405161014a919061191a565b60405180910390f35b61016d60048036038101906101689190611972565b6104b9565b60405161017a91906119e0565b60405180910390f35b61019d60048036038101906101989190611a27565b6104d5565b005b6101a76104eb565b6040516101b491906119e0565b60405180910390f35b6101d760048036038101906101d29190611a67565b610511565b005b6101e1610613565b6040516101ee9190611ac9565b60405180910390f35b610211600480360381019061020c9190611a67565b610619565b005b61022d60048036038101906102289190611972565b610639565b60405161023a91906119e0565b60405180910390f35b61025d60048036038101906102589190611ae4565b61064b565b005b61027960048036038101906102749190611ae4565b610749565b6040516102869190611ac9565b60405180910390f35b610297610803565b6040516102a4919061191a565b60405180910390f35b6102c760048036038101906102c29190611b3d565b610895565b005b6102e360048036038101906102de9190611cb2565b6108ab565b005b6102ff60048036038101906102fa9190611972565b6108c8565b60405161030c919061191a565b60405180910390f35b61032f600480360381019061032a9190611d35565b610931565b60405161033c919061186f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610420575061041f826109c5565b5b9050919050565b60606000805461043690611da4565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611da4565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b60006104c482610a2f565b506104ce82610ab7565b9050919050565b6104e782826104e2610af4565b610afc565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105835760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161057a91906119e0565b60405180910390fd5b60006105978383610592610af4565b610b0e565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060d578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161060493929190611dd5565b60405180910390fd5b50505050565b60065481565b610634838383604051806020016040528060008152506108ab565b505050565b600061064482610a2f565b9050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f91f6598400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106de81600654610d28565b8073ffffffffffffffffffffffffffffffffffffffff167fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a86006546040516107269190611ac9565b60405180910390a26006600081548092919061074190611e3b565b919050555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107bc5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016107b391906119e0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461081290611da4565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90611da4565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b5050505050905090565b6108a76108a0610af4565b8383610d46565b5050565b6108b6848484610511565b6108c284848484610eb5565b50505050565b60606108d382610a2f565b5060006108de61106c565b905060008151116108fe5760405180602001604052806000815250610929565b80610908846110fe565b604051602001610919929190611ebf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080610a3b836111cc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aae57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610aa59190611ac9565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610b098383836001611209565b505050565b600080610b1a846111cc565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b5c57610b5b8184866113ce565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bed57610b9e600085600080611209565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610c70576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610d42828260405180602001604052806000815250611492565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610db757816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610dae91906119e0565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ea8919061186f565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611066578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02610ef9610af4565b8685856040518563ffffffff1660e01b8152600401610f1b9493929190611f38565b6020604051808303816000875af1925050508015610f5757506040513d601f19601f82011682018060405250810190610f549190611f99565b60015b610fdb573d8060008114610f87576040519150601f19603f3d011682016040523d82523d6000602084013e610f8c565b606091505b506000815103610fd357836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610fca91906119e0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461106457836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161105b91906119e0565b60405180910390fd5b505b50505050565b60606008805461107b90611da4565b80601f01602080910402602001604051908101604052809291908181526020018280546110a790611da4565b80156110f45780601f106110c9576101008083540402835291602001916110f4565b820191906000526020600020905b8154815290600101906020018083116110d757829003601f168201915b5050505050905090565b60606000600161110d846114ae565b01905060008167ffffffffffffffff81111561112c5761112b611b87565b5b6040519080825280601f01601f19166020018201604052801561115e5781602001600182028036833780820191505090505b509050600082602001820190505b6001156111c1578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816111b5576111b4611fc6565b5b0494506000850361116c575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806112425750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561137657600061125284610a2f565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156112bd57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156112d057506112ce8184610931565b155b1561131257826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161130991906119e0565b60405180910390fd5b811561137457838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6113d9838383611601565b61148d57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361144e57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016114459190611ac9565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611484929190611ff5565b60405180910390fd5b505050565b61149c83836116c2565b6114a96000848484610eb5565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061150c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161150257611501611fc6565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611549576d04ee2d6d415b85acef8100000000838161153f5761153e611fc6565b5b0492506020810190505b662386f26fc10000831061157857662386f26fc10000838161156e5761156d611fc6565b5b0492506010810190505b6305f5e10083106115a1576305f5e100838161159757611596611fc6565b5b0492506008810190505b61271083106115c65761271083816115bc576115bb611fc6565b5b0492506004810190505b606483106115e957606483816115df576115de611fc6565b5b0492506002810190505b600a83106115f8576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156116b957508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061167a57506116798484610931565b5b806116b857508273ffffffffffffffffffffffffffffffffffffffff166116a083610ab7565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117345760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161172b91906119e0565b60405180910390fd5b600061174283836000610b0e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117b65760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016117ad91906119e0565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611804816117cf565b811461180f57600080fd5b50565b600081359050611821816117fb565b92915050565b60006020828403121561183d5761183c6117c5565b5b600061184b84828501611812565b91505092915050565b60008115159050919050565b61186981611854565b82525050565b60006020820190506118846000830184611860565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118c45780820151818401526020810190506118a9565b60008484015250505050565b6000601f19601f8301169050919050565b60006118ec8261188a565b6118f68185611895565b93506119068185602086016118a6565b61190f816118d0565b840191505092915050565b6000602082019050818103600083015261193481846118e1565b905092915050565b6000819050919050565b61194f8161193c565b811461195a57600080fd5b50565b60008135905061196c81611946565b92915050565b600060208284031215611988576119876117c5565b5b60006119968482850161195d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119ca8261199f565b9050919050565b6119da816119bf565b82525050565b60006020820190506119f560008301846119d1565b92915050565b611a04816119bf565b8114611a0f57600080fd5b50565b600081359050611a21816119fb565b92915050565b60008060408385031215611a3e57611a3d6117c5565b5b6000611a4c85828601611a12565b9250506020611a5d8582860161195d565b9150509250929050565b600080600060608486031215611a8057611a7f6117c5565b5b6000611a8e86828701611a12565b9350506020611a9f86828701611a12565b9250506040611ab08682870161195d565b9150509250925092565b611ac38161193c565b82525050565b6000602082019050611ade6000830184611aba565b92915050565b600060208284031215611afa57611af96117c5565b5b6000611b0884828501611a12565b91505092915050565b611b1a81611854565b8114611b2557600080fd5b50565b600081359050611b3781611b11565b92915050565b60008060408385031215611b5457611b536117c5565b5b6000611b6285828601611a12565b9250506020611b7385828601611b28565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bbf826118d0565b810181811067ffffffffffffffff82111715611bde57611bdd611b87565b5b80604052505050565b6000611bf16117bb565b9050611bfd8282611bb6565b919050565b600067ffffffffffffffff821115611c1d57611c1c611b87565b5b611c26826118d0565b9050602081019050919050565b82818337600083830152505050565b6000611c55611c5084611c02565b611be7565b905082815260208101848484011115611c7157611c70611b82565b5b611c7c848285611c33565b509392505050565b600082601f830112611c9957611c98611b7d565b5b8135611ca9848260208601611c42565b91505092915050565b60008060008060808587031215611ccc57611ccb6117c5565b5b6000611cda87828801611a12565b9450506020611ceb87828801611a12565b9350506040611cfc8782880161195d565b925050606085013567ffffffffffffffff811115611d1d57611d1c6117ca565b5b611d2987828801611c84565b91505092959194509250565b60008060408385031215611d4c57611d4b6117c5565b5b6000611d5a85828601611a12565b9250506020611d6b85828601611a12565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611dbc57607f821691505b602082108103611dcf57611dce611d75565b5b50919050565b6000606082019050611dea60008301866119d1565b611df76020830185611aba565b611e0460408301846119d1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e468261193c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e7857611e77611e0c565b5b600182019050919050565b600081905092915050565b6000611e998261188a565b611ea38185611e83565b9350611eb38185602086016118a6565b80840191505092915050565b6000611ecb8285611e8e565b9150611ed78284611e8e565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000611f0a82611ee3565b611f148185611eee565b9350611f248185602086016118a6565b611f2d816118d0565b840191505092915050565b6000608082019050611f4d60008301876119d1565b611f5a60208301866119d1565b611f676040830185611aba565b8181036060830152611f798184611eff565b905095945050505050565b600081519050611f93816117fb565b92915050565b600060208284031215611faf57611fae6117c5565b5b6000611fbd84828501611f84565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060408201905061200a60008301856119d1565b6120176020830184611aba565b939250505056fea2646970667358221220d189c4f56de7088429eaff80a1e7b9bdb1550455b7cee6d5d80e71ed8974094d64736f6c63430008140033a264697066735822122072551998036805ebc2d5a303b1da0391b4ae08496d52502a9978f38bc63121fb64736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000865760003560e01c80635a1f3c2811620000555780635a1f3c28146200014f57806384ef9a181462000193578063893d20e814620001d7578063e267185614620002075762000086565b806309cc449d146200008b5780630a7dcc0714620000cf5780631cea913d14620000ff578063243adbdd146200012f575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b1919062000d50565b62000235565b604051620000c6919062000db4565b60405180910390f35b348015620000dc57600080fd5b50620000e7620002d9565b604051620000f6919062000de2565b60405180910390f35b3480156200010c57600080fd5b5062000117620002e3565b60405162000126919062000ffd565b60405180910390f35b6200014d600480360381019062000147919062001021565b620004d8565b005b3480156200015c57600080fd5b506200017b600480360381019062000175919062001021565b620006c0565b6040516200018a9190620010c5565b60405180910390f35b348015620001a057600080fd5b50620001bf6004803603810190620001b9919062000d50565b620008bf565b604051620001ce919062000db4565b60405180910390f35b348015620001e457600080fd5b50620001ef62000963565b604051620001fe9190620010fa565b60405180910390f35b3480156200021457600080fd5b506200023360048036038101906200022d919062001268565b6200098c565b005b6000600154831062000273576040517f0c2d789f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600154905090565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015620004cf57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820180546200039d9062001366565b80601f0160208091040260200160405190810160405280929190818152602001828054620003cb9062001366565b80156200041c5780601f10620003f0576101008083540402835291602001916200041c565b820191906000526020600020905b815481529060010190602001808311620003fe57829003601f168201915b50505050508152602001600382018054620004379062001366565b80601f0160208091040260200160405190810160405280929190818152602001828054620004659062001366565b8015620004b65780601f106200048a57610100808354040283529160200191620004b6565b820191906000526020600020905b8154815290600101906020018083116200049857829003601f168201915b5050505050815250508152602001906001019062000307565b50505050905090565b600154811062000514576040517f0c2d789f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008281526020019081526020016000206001015434101562000565576040517fb18bc8f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636a627842336040518263ffffffff1660e01b8152600401620005db9190620010fa565b600060405180830381600087803b158015620005f657600080fd5b505af11580156200060b573d6000803e3d6000fd5b5050505060016003600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16827f9697071bc08ed28bc23db7ef4cce0abeb5bc570b2a4c9ac79d4200b281d4c44660405160405180910390a35050565b620006ca62000c50565b600154821062000706576040517f38d82d2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054620007969062001366565b80601f0160208091040260200160405190810160405280929190818152602001828054620007c49062001366565b8015620008155780601f10620007e95761010080835404028352916020019162000815565b820191906000526020600020905b815481529060010190602001808311620007f757829003601f168201915b50505050508152602001600382018054620008309062001366565b80601f01602080910402602001604051908101604052809291908181526020018280546200085e9062001366565b8015620008af5780601f106200088357610100808354040283529160200191620008af565b820191906000526020600020905b8154815290600101906020018083116200089157829003601f168201915b5050505050815250509050919050565b60006001548310620008fd576040517f38d82d2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a12576040517f4767ead100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001549050600085858460405162000a2c9062000c8e565b62000a3a93929190620013ed565b604051809103906000f08015801562000a57573d6000803e3d6000fd5b509050600060405180608001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001888152602001858152509050806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201908162000b11919062001611565b50606082015181600301908162000b29919062001611565b50905050600481908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201908162000bc1919062001611565b50606082015181600301908162000bd9919062001611565b5050508173ffffffffffffffffffffffffffffffffffffffff16837fb0b7b214963f2e16da9cf6ed5851757dfed306875edf1d59e030881102ef24ef8660405162000c259190620016f8565b60405180910390a36001600081548092919062000c42906200174b565b919050555050505050505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081525090565b61269d806200179983390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000cc58162000cb0565b811462000cd157600080fd5b50565b60008135905062000ce58162000cba565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000d188262000ceb565b9050919050565b62000d2a8162000d0b565b811462000d3657600080fd5b50565b60008135905062000d4a8162000d1f565b92915050565b6000806040838503121562000d6a5762000d6962000ca6565b5b600062000d7a8582860162000cd4565b925050602062000d8d8582860162000d39565b9150509250929050565b60008115159050919050565b62000dae8162000d97565b82525050565b600060208201905062000dcb600083018462000da3565b92915050565b62000ddc8162000cb0565b82525050565b600060208201905062000df9600083018462000dd1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000e368162000d0b565b82525050565b62000e478162000cb0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000e8957808201518184015260208101905062000e6c565b60008484015250505050565b6000601f19601f8301169050919050565b600062000eb38262000e4d565b62000ebf818562000e58565b935062000ed181856020860162000e69565b62000edc8162000e95565b840191505092915050565b600060808301600083015162000f01600086018262000e2b565b50602083015162000f16602086018262000e3c565b506040830151848203604086015262000f30828262000ea6565b9150506060830151848203606086015262000f4c828262000ea6565b9150508091505092915050565b600062000f67838362000ee7565b905092915050565b6000602082019050919050565b600062000f898262000dff565b62000f95818562000e0a565b93508360208202850162000fa98562000e1b565b8060005b8581101562000feb578484038952815162000fc9858262000f59565b945062000fd68362000f6f565b925060208a0199505060018101905062000fad565b50829750879550505050505092915050565b6000602082019050818103600083015262001019818462000f7c565b905092915050565b6000602082840312156200103a576200103962000ca6565b5b60006200104a8482850162000cd4565b91505092915050565b60006080830160008301516200106d600086018262000e2b565b50602083015162001082602086018262000e3c565b50604083015184820360408601526200109c828262000ea6565b91505060608301518482036060860152620010b8828262000ea6565b9150508091505092915050565b60006020820190508181036000830152620010e1818462001053565b905092915050565b620010f48162000d0b565b82525050565b6000602082019050620011116000830184620010e9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200115b8262000e95565b810181811067ffffffffffffffff821117156200117d576200117c62001121565b5b80604052505050565b60006200119262000c9c565b9050620011a0828262001150565b919050565b600067ffffffffffffffff821115620011c357620011c262001121565b5b620011ce8262000e95565b9050602081019050919050565b82818337600083830152505050565b600062001201620011fb84620011a5565b62001186565b90508281526020810184848401111562001220576200121f6200111c565b5b6200122d848285620011db565b509392505050565b600082601f8301126200124d576200124c62001117565b5b81356200125f848260208601620011ea565b91505092915050565b6000806000806080858703121562001285576200128462000ca6565b5b600085013567ffffffffffffffff811115620012a657620012a562000cab565b5b620012b48782880162001235565b945050602085013567ffffffffffffffff811115620012d857620012d762000cab565b5b620012e68782880162001235565b9350506040620012f98782880162000cd4565b925050606085013567ffffffffffffffff8111156200131d576200131c62000cab565b5b6200132b8782880162001235565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200137f57607f821691505b60208210810362001395576200139462001337565b5b50919050565b600082825260208201905092915050565b6000620013b98262000e4d565b620013c581856200139b565b9350620013d781856020860162000e69565b620013e28162000e95565b840191505092915050565b60006060820190508181036000830152620014098186620013ac565b905081810360208301526200141f8185620013ac565b90508181036040830152620014358184620013ac565b9050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620014a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262001464565b620014af868362001464565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620014f2620014ec620014e68462000cb0565b620014c7565b62000cb0565b9050919050565b6000819050919050565b6200150e83620014d1565b620015266200151d82620014f9565b84845462001471565b825550505050565b600090565b6200153d6200152e565b6200154a81848462001503565b505050565b5b8181101562001572576200156660008262001533565b60018101905062001550565b5050565b601f821115620015c1576200158b816200143f565b620015968462001454565b81016020851015620015a6578190505b620015be620015b58562001454565b8301826200154f565b50505b505050565b600082821c905092915050565b6000620015e660001984600802620015c6565b1980831691505092915050565b6000620016018383620015d3565b9150826002028217905092915050565b6200161c8262000e4d565b67ffffffffffffffff81111562001638576200163762001121565b5b62001644825462001366565b6200165182828562001576565b600060209050601f83116001811462001689576000841562001674578287015190505b620016808582620015f3565b865550620016f0565b601f19841662001699866200143f565b60005b82811015620016c3578489015182556001820191506020850194506020810190506200169c565b86831015620016e35784890151620016df601f891682620015d3565b8355505b6001600288020188555050505b505050505050565b60006020820190508181036000830152620017148184620013ac565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620017588262000cb0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200178d576200178c6200171c565b5b60018201905091905056fe60806040523480156200001157600080fd5b506040516200269d3803806200269d83398181016040528101906200003791906200024e565b828281600090816200004a919062000552565b5080600190816200005c919062000552565b50505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060089081620000b1919062000552565b5050505062000639565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012482620000d9565b810181811067ffffffffffffffff82111715620001465762000145620000ea565b5b80604052505050565b60006200015b620000bb565b905062000169828262000119565b919050565b600067ffffffffffffffff8211156200018c576200018b620000ea565b5b6200019782620000d9565b9050602081019050919050565b60005b83811015620001c4578082015181840152602081019050620001a7565b60008484015250505050565b6000620001e7620001e1846200016e565b6200014f565b905082815260208101848484011115620002065762000205620000d4565b5b62000213848285620001a4565b509392505050565b600082601f830112620002335762000232620000cf565b5b815162000245848260208601620001d0565b91505092915050565b6000806000606084860312156200026a5762000269620000c5565b5b600084015167ffffffffffffffff8111156200028b576200028a620000ca565b5b62000299868287016200021b565b935050602084015167ffffffffffffffff811115620002bd57620002bc620000ca565b5b620002cb868287016200021b565b925050604084015167ffffffffffffffff811115620002ef57620002ee620000ca565b5b620002fd868287016200021b565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035a57607f821691505b60208210810362000370576200036f62000312565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003da7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200039b565b620003e686836200039b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004336200042d6200042784620003fe565b62000408565b620003fe565b9050919050565b6000819050919050565b6200044f8362000412565b620004676200045e826200043a565b848454620003a8565b825550505050565b600090565b6200047e6200046f565b6200048b81848462000444565b505050565b5b81811015620004b357620004a760008262000474565b60018101905062000491565b5050565b601f8211156200050257620004cc8162000376565b620004d7846200038b565b81016020851015620004e7578190505b620004ff620004f6856200038b565b83018262000490565b50505b505050565b600082821c905092915050565b6000620005276000198460080262000507565b1980831691505092915050565b600062000542838362000514565b9150826002028217905092915050565b6200055d8262000307565b67ffffffffffffffff811115620005795762000578620000ea565b5b62000585825462000341565b62000592828285620004b7565b600060209050601f831160018114620005ca5760008415620005b5578287015190505b620005c1858262000534565b86555062000631565b601f198416620005da8662000376565b60005b828110156200060457848901518255600182019150602085019450602081019050620005dd565b8683101562000624578489015162000620601f89168262000514565b8355505b6001600288020188555050505b505050505050565b61205480620006496000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146102ad578063b88d4fde146102c9578063c87b56dd146102e5578063e985e9c51461031557610100565b80636352211e146102135780636a6278421461024357806370a082311461025f57806395d89b411461028f57610100565b8063132788cf116100d3578063132788cf1461019f57806323b872dd146101bd5780633ee3af9a146101d957806342842e0e146101f757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611827565b610345565b60405161012c919061186f565b60405180910390f35b61013d610427565b60405161014a919061191a565b60405180910390f35b61016d60048036038101906101689190611972565b6104b9565b60405161017a91906119e0565b60405180910390f35b61019d60048036038101906101989190611a27565b6104d5565b005b6101a76104eb565b6040516101b491906119e0565b60405180910390f35b6101d760048036038101906101d29190611a67565b610511565b005b6101e1610613565b6040516101ee9190611ac9565b60405180910390f35b610211600480360381019061020c9190611a67565b610619565b005b61022d60048036038101906102289190611972565b610639565b60405161023a91906119e0565b60405180910390f35b61025d60048036038101906102589190611ae4565b61064b565b005b61027960048036038101906102749190611ae4565b610749565b6040516102869190611ac9565b60405180910390f35b610297610803565b6040516102a4919061191a565b60405180910390f35b6102c760048036038101906102c29190611b3d565b610895565b005b6102e360048036038101906102de9190611cb2565b6108ab565b005b6102ff60048036038101906102fa9190611972565b6108c8565b60405161030c919061191a565b60405180910390f35b61032f600480360381019061032a9190611d35565b610931565b60405161033c919061186f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610420575061041f826109c5565b5b9050919050565b60606000805461043690611da4565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611da4565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b60006104c482610a2f565b506104ce82610ab7565b9050919050565b6104e782826104e2610af4565b610afc565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105835760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161057a91906119e0565b60405180910390fd5b60006105978383610592610af4565b610b0e565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060d578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161060493929190611dd5565b60405180910390fd5b50505050565b60065481565b610634838383604051806020016040528060008152506108ab565b505050565b600061064482610a2f565b9050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f91f6598400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106de81600654610d28565b8073ffffffffffffffffffffffffffffffffffffffff167fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a86006546040516107269190611ac9565b60405180910390a26006600081548092919061074190611e3b565b919050555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107bc5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016107b391906119e0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461081290611da4565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90611da4565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b5050505050905090565b6108a76108a0610af4565b8383610d46565b5050565b6108b6848484610511565b6108c284848484610eb5565b50505050565b60606108d382610a2f565b5060006108de61106c565b905060008151116108fe5760405180602001604052806000815250610929565b80610908846110fe565b604051602001610919929190611ebf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080610a3b836111cc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aae57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610aa59190611ac9565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610b098383836001611209565b505050565b600080610b1a846111cc565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b5c57610b5b8184866113ce565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bed57610b9e600085600080611209565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610c70576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610d42828260405180602001604052806000815250611492565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610db757816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610dae91906119e0565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ea8919061186f565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611066578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02610ef9610af4565b8685856040518563ffffffff1660e01b8152600401610f1b9493929190611f38565b6020604051808303816000875af1925050508015610f5757506040513d601f19601f82011682018060405250810190610f549190611f99565b60015b610fdb573d8060008114610f87576040519150601f19603f3d011682016040523d82523d6000602084013e610f8c565b606091505b506000815103610fd357836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610fca91906119e0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461106457836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161105b91906119e0565b60405180910390fd5b505b50505050565b60606008805461107b90611da4565b80601f01602080910402602001604051908101604052809291908181526020018280546110a790611da4565b80156110f45780601f106110c9576101008083540402835291602001916110f4565b820191906000526020600020905b8154815290600101906020018083116110d757829003601f168201915b5050505050905090565b60606000600161110d846114ae565b01905060008167ffffffffffffffff81111561112c5761112b611b87565b5b6040519080825280601f01601f19166020018201604052801561115e5781602001600182028036833780820191505090505b509050600082602001820190505b6001156111c1578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816111b5576111b4611fc6565b5b0494506000850361116c575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806112425750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561137657600061125284610a2f565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156112bd57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156112d057506112ce8184610931565b155b1561131257826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161130991906119e0565b60405180910390fd5b811561137457838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6113d9838383611601565b61148d57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361144e57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016114459190611ac9565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611484929190611ff5565b60405180910390fd5b505050565b61149c83836116c2565b6114a96000848484610eb5565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061150c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161150257611501611fc6565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611549576d04ee2d6d415b85acef8100000000838161153f5761153e611fc6565b5b0492506020810190505b662386f26fc10000831061157857662386f26fc10000838161156e5761156d611fc6565b5b0492506010810190505b6305f5e10083106115a1576305f5e100838161159757611596611fc6565b5b0492506008810190505b61271083106115c65761271083816115bc576115bb611fc6565b5b0492506004810190505b606483106115e957606483816115df576115de611fc6565b5b0492506002810190505b600a83106115f8576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156116b957508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061167a57506116798484610931565b5b806116b857508273ffffffffffffffffffffffffffffffffffffffff166116a083610ab7565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117345760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161172b91906119e0565b60405180910390fd5b600061174283836000610b0e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117b65760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016117ad91906119e0565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611804816117cf565b811461180f57600080fd5b50565b600081359050611821816117fb565b92915050565b60006020828403121561183d5761183c6117c5565b5b600061184b84828501611812565b91505092915050565b60008115159050919050565b61186981611854565b82525050565b60006020820190506118846000830184611860565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118c45780820151818401526020810190506118a9565b60008484015250505050565b6000601f19601f8301169050919050565b60006118ec8261188a565b6118f68185611895565b93506119068185602086016118a6565b61190f816118d0565b840191505092915050565b6000602082019050818103600083015261193481846118e1565b905092915050565b6000819050919050565b61194f8161193c565b811461195a57600080fd5b50565b60008135905061196c81611946565b92915050565b600060208284031215611988576119876117c5565b5b60006119968482850161195d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119ca8261199f565b9050919050565b6119da816119bf565b82525050565b60006020820190506119f560008301846119d1565b92915050565b611a04816119bf565b8114611a0f57600080fd5b50565b600081359050611a21816119fb565b92915050565b60008060408385031215611a3e57611a3d6117c5565b5b6000611a4c85828601611a12565b9250506020611a5d8582860161195d565b9150509250929050565b600080600060608486031215611a8057611a7f6117c5565b5b6000611a8e86828701611a12565b9350506020611a9f86828701611a12565b9250506040611ab08682870161195d565b9150509250925092565b611ac38161193c565b82525050565b6000602082019050611ade6000830184611aba565b92915050565b600060208284031215611afa57611af96117c5565b5b6000611b0884828501611a12565b91505092915050565b611b1a81611854565b8114611b2557600080fd5b50565b600081359050611b3781611b11565b92915050565b60008060408385031215611b5457611b536117c5565b5b6000611b6285828601611a12565b9250506020611b7385828601611b28565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bbf826118d0565b810181811067ffffffffffffffff82111715611bde57611bdd611b87565b5b80604052505050565b6000611bf16117bb565b9050611bfd8282611bb6565b919050565b600067ffffffffffffffff821115611c1d57611c1c611b87565b5b611c26826118d0565b9050602081019050919050565b82818337600083830152505050565b6000611c55611c5084611c02565b611be7565b905082815260208101848484011115611c7157611c70611b82565b5b611c7c848285611c33565b509392505050565b600082601f830112611c9957611c98611b7d565b5b8135611ca9848260208601611c42565b91505092915050565b60008060008060808587031215611ccc57611ccb6117c5565b5b6000611cda87828801611a12565b9450506020611ceb87828801611a12565b9350506040611cfc8782880161195d565b925050606085013567ffffffffffffffff811115611d1d57611d1c6117ca565b5b611d2987828801611c84565b91505092959194509250565b60008060408385031215611d4c57611d4b6117c5565b5b6000611d5a85828601611a12565b9250506020611d6b85828601611a12565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611dbc57607f821691505b602082108103611dcf57611dce611d75565b5b50919050565b6000606082019050611dea60008301866119d1565b611df76020830185611aba565b611e0460408301846119d1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e468261193c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e7857611e77611e0c565b5b600182019050919050565b600081905092915050565b6000611e998261188a565b611ea38185611e83565b9350611eb38185602086016118a6565b80840191505092915050565b6000611ecb8285611e8e565b9150611ed78284611e8e565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000611f0a82611ee3565b611f148185611eee565b9350611f248185602086016118a6565b611f2d816118d0565b840191505092915050565b6000608082019050611f4d60008301876119d1565b611f5a60208301866119d1565b611f676040830185611aba565b8181036060830152611f798184611eff565b905095945050505050565b600081519050611f93816117fb565b92915050565b600060208284031215611faf57611fae6117c5565b5b6000611fbd84828501611f84565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060408201905061200a60008301856119d1565b6120176020830184611aba565b939250505056fea2646970667358221220d189c4f56de7088429eaff80a1e7b9bdb1550455b7cee6d5d80e71ed8974094d64736f6c63430008140033a264697066735822122072551998036805ebc2d5a303b1da0391b4ae08496d52502a9978f38bc63121fb64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3136,
        "contract": "contracts/NftClub.sol:NftClub",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3138,
        "contract": "contracts/NftClub.sol:NftClub",
        "label": "s_nextCollectionId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3143,
        "contract": "contracts/NftClub.sol:NftClub",
        "label": "s_collections",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Collection)3134_storage)"
      },
      {
        "astId": 3149,
        "contract": "contracts/NftClub.sol:NftClub",
        "label": "s_nftOwners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3153,
        "contract": "contracts/NftClub.sol:NftClub",
        "label": "s_currentCollections",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Collection)3134_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Collection)3134_storage)dyn_storage": {
        "base": "t_struct(Collection)3134_storage",
        "encoding": "dynamic_array",
        "label": "struct NftClubStorage.Collection[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Collection)3134_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftClubStorage.Collection)",
        "numberOfBytes": "32",
        "value": "t_struct(Collection)3134_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Collection)3134_storage": {
        "encoding": "inplace",
        "label": "struct NftClubStorage.Collection",
        "members": [
          {
            "astId": 3127,
            "contract": "contracts/NftClub.sol:NftClub",
            "label": "collectionAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3129,
            "contract": "contracts/NftClub.sol:NftClub",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3131,
            "contract": "contracts/NftClub.sol:NftClub",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3133,
            "contract": "contracts/NftClub.sol:NftClub",
            "label": "URI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}